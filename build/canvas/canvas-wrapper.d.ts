import { PanZoomManager } from 'canvas/managers/pan-zoom-manager';
import { MouseManager } from 'canvas/managers/mouse-manager';
import { KeyboardManager } from 'canvas/managers/keyboard-manager';
import { UIManager } from 'canvas/managers/ui-manager';
export declare class CanvasWrapper {
    private delta;
    private lastRender;
    private fps;
    readonly drawingContext: CanvasRenderingContext2D;
    readonly mouseManager: MouseManager;
    readonly panZoomManager: PanZoomManager;
    readonly keyboardManager: KeyboardManager;
    readonly uiManager: UIManager;
    readonly bounds: ClientRect | DOMRect;
    readonly width: number;
    readonly height: number;
    pauseKeys: string[];
    frameForwardKeys: string[];
    enableGrid: boolean;
    overlayAsBackground: boolean;
    trackMouse: boolean;
    private _context;
    private _pauseKeys;
    private _frameForwardKeys;
    private paused;
    private frameStep;
    private _overlayAsBackground;
    private _enableGrid;
    private _trackMouse;
    private helperUtility;
    private _panZoomManager;
    private _mouseManager;
    private _uiManager;
    private _keyboardManager;
    private _WindowManager;
    private currentMouseData;
    private transformChanged;
    private PanZoomData;
    private needsFlip;
    constructor(context: CanvasRenderingContext2D, drawCallback: () => void);
    start(): void;
    saveContext(): void;
    restoreContext(): void;
    private setupManagers;
    private setupUtilities;
    private registerEvents;
    private mouseMoved;
    private mouseDown;
    private mouseUp;
    private mouseLeave;
    private panZoomChanged;
    private setupCanvas;
    private draw;
    private applyPanAndZoom;
    private drawGrid;
    private trackMousePosition;
    private drawMouse;
    private checkKeys;
}
//# sourceMappingURL=canvas-wrapper.d.ts.map